import { LitElement, html } from 'lit';

/**
 * @element my-collapse-list
 * @property {boolean} singleOpen - Only one item open at a time
 * @method openAll() - Opens all items (only if singleOpen = false)
 * @method closeAll() - Closes all items
 * @method open(index|number[]) - Opens one or multiple items
 * @fires itemToggled - detail: { index, open }
 * @fires stateChange - detail: { openIndexes: number[] }
 */
export class MyCollapseList extends LitElement {
  static properties = {
    singleOpen: { type: Boolean },
  };

  constructor() {
    super();
    this.singleOpen = false;
  }

  get items() {
    const itemList = Array.from(this.querySelectorAll('my-collapse-item'));
    itemList.forEach((item, index) => {
      item.dataset.index = index;
      const wrapper = item.closest('.list-item');
      if (wrapper) wrapper.setAttribute('role', 'listitem');
    });
    return itemList;
  }

  openAll() {
    if (this.singleOpen) return;
    this.items.forEach((item) => { item.open = true; });
    this.emitStateChange();
  }

  closeAll() {
    this.items.forEach((item) => { item.closeByList(); });
    this.emitStateChange();
  }

  open(indexOrArray) {
    const targets = Array.isArray(indexOrArray) ? indexOrArray : [indexOrArray];
    if (this.singleOpen) {
      this.closeAll();
      const first = targets[0];
      if (this.items[first]) this.items[first].open = true;
    } else {
      targets.forEach((i) => {
        if (this.items[i]) this.items[i].open = true;
      });
    }
    this.emitStateChange();
  }

  emitStateChange() {
    const openIndexes = this.items
      .map((item, i) => (item.open ? i : null))
      .filter((i) => i !== null);

    this.dispatchEvent(new CustomEvent('stateChange', {
      detail: { openIndexes },
    }));
  }

  firstUpdated() {
    this.setAttribute('role', 'list');

    this.addEventListener('toggle', (e) => {
      const { index, open } = e.detail;

      this.dispatchEvent(new CustomEvent('itemToggled', {
        detail: { index, open },
      }));

      if (this.singleOpen && open) {
        this.items.forEach((item, i) => {
          if (i !== index && item.open) item.closeByList();
        });
      }

      this.emitStateChange();
    });

    this.updateListItemRoles();
  }

  updateListItemRoles() {
    const wrappers = Array.from(this.querySelectorAll('.list-item'));
    wrappers.forEach((w) => w.setAttribute('role', 'listitem'));
  }

  render() {
    return html`
      <div role="listbox" aria-multiselectable="${!this.singleOpen}">
        <slot></slot>
      </div>
    `;
  }
}

customElements.define('my-collapse-list', MyCollapseList);